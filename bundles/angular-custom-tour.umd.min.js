!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("@angular/core"),require("@angular/common"),require("rxjs/Subject")):"function"==typeof define&&define.amd?define(["@angular/core","@angular/common","rxjs/Subject"],e):"object"==typeof exports?exports["angular-custom-tour"]=e(require("@angular/core"),require("@angular/common"),require("rxjs/Subject")):t["angular-custom-tour"]=e(t["@angular/core"],t["@angular/common"],t["rxjs/Subject"])}(this,function(t,e,i){return function(t){function e(n){if(i[n])return i[n].exports;var o=i[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var i={};return e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="/",e(e.s=4)}([function(e,i){e.exports=t},function(t,e,i){"use strict";var n=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};Object.defineProperty(e,"__esModule",{value:!0});var o=i(0),r=i(9),s=i(7),c=function(){function t(){this.anchors={},this.overlay$=new r.Subject,this.registration$=new r.Subject,this.finish$=new r.Subject,this.showingStep$=new r.Subject}return t.prototype.initialize=function(t){void 0===t&&(t=new s.HintOptions),this.hintOptions=Object.assign(new s.HintOptions,t);var e=document.getElementsByTagName(this.hintOptions.stepTag);this.steps=this.initSteps(e),this.startAt(0),this.overlay$.next(!0)},t.prototype.show=function(t){var e=this.anchors[t.selector];e&&e.showStep()},t.prototype.showNext=function(){this.currentStep=this.steps[this.steps.indexOf(this.currentStep)+1];var t=this.anchors[this.currentStep.selector];t&&t.showStep()},t.prototype.overlayNext=function(){this.hasNext()?(this.anchors[this.currentStep.selector].hideStep(),this.showNext()):this.end()},t.prototype.showPrev=function(){this.currentStep=this.steps[this.steps.indexOf(this.currentStep)-1];var t=this.anchors[this.currentStep.selector];t&&t.showStep()},t.prototype.register=function(t,e){if(this.anchors[t])throw"selector "+t+" already registered!";this.anchors[t]=e,this.registration$.next(!0)},t.prototype.hasNext=function(){return this.steps.indexOf(this.currentStep)<this.steps.length-1},t.prototype.hasPrev=function(){return this.steps.indexOf(this.currentStep)>0},t.prototype.end=function(){this.overlay$.next(!1);var t=this.anchors[this.currentStep.selector];t&&(this.currentStep=void 0,t.hideStep(),this.finish$.next(!0))},t.prototype.startAt=function(t){this.currentStep=this.steps[t],this.show(this.currentStep)},t.prototype.initSteps=function(t){for(var e=[],i=0;i<t.length;i++)e.push({selector:t[i].getAttribute("selector"),order:+t[i].getAttribute("order")||this.hintOptions.defaultOrder});return e=e.sort(function(t,e){return t.order-e.order})},t.prototype.putOverlay=function(){document.getElementsByTagName("body")},t=n([o.Injectable()],t)}();e.HintService=c},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HintConfig={HINT_TAG:"tour-step",DEFAULT_POSITION:"bottom",Z_INDEX:"999",DEFAULT_ORDER:99,DEFAULT_PX_LAYER:15,APPLY_RELATIVE:!0,DISMISS_ON_OVERLAY:!1}},function(t,e,i){"use strict";var n=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};Object.defineProperty(e,"__esModule",{value:!0});var o=i(1);e.HintService=o.HintService;var r=i(8),s=i(0),c=i(5),h=i(6);e.TourComponent=h.TourComponent;var a=function(){function t(){}return e=t,t.forRoot=function(){return{ngModule:e,providers:[o.HintService]}},t=e=n([s.NgModule({declarations:[c.HintComponent,h.TourComponent],exports:[c.HintComponent,h.TourComponent],imports:[r.CommonModule]})],t);var e}();e.HintModule=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var i in t)e.hasOwnProperty(i)||(e[i]=t[i])}(i(3))},function(t,e,i){"use strict";var n=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s},o=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var r=i(1),s=i(0),c=function(){function t(t){var e=this;this.hintService=t,this.hintService.overlay$.subscribe(function(t){return e.show=t})}return t.prototype.dismiss=function(){this.hintService.hintOptions.dismissOnOverlay&&this.hintService.overlayNext()},t=n([s.Component({selector:"tour-overlay",template:'<div class="hint-overlay" *ngIf="show" (click)="dismiss()"></div>'}),o("design:paramtypes",[r.HintService])],t)}();e.HintComponent=c},function(t,e,i){"use strict";var n=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s},o=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var r=i(0),s=i(1),c=i(2),h=function(){function t(t){this.hintService=t,this.nextEventEmitter=new r.EventEmitter,this.prevEventEmitter=new r.EventEmitter,this.exitEventEmitter=new r.EventEmitter}return t.prototype.ngOnInit=function(){this.hintService.register(this.selector,this)},t.prototype.showStep=function(){this.hintService.showingStep$.next(this),this.position=this.position||this.hintService.hintOptions.defaultPosition,this.order=+this.order||this.hintService.hintOptions.defaultOrder;var t=document.getElementById(this.selector);if(t)switch(t.style.zIndex=c.HintConfig.Z_INDEX,this.hintService.hintOptions.elementsDisabled&&this.disableClick(t),this.hintService.hintOptions.applyRelative&&t.classList.add("hint-relative"),this.position){case"top":this.transformClass="transformX_50 transformY_100",this.topPos=t.offsetTop-this.hintService.hintOptions.defaultLayer,this.leftPos=t.offsetLeft+t.offsetWidth/2;break;case"bottom":this.transformClass="transformX_50",this.topPos=t.offsetTop+t.offsetHeight+this.hintService.hintOptions.defaultLayer,this.leftPos=t.offsetLeft+t.offsetWidth/2;break;case"left":this.topPos=t.offsetTop+t.offsetHeight/2,this.leftPos=t.offsetLeft-this.hintService.hintOptions.defaultLayer,this.transformClass="transformY_50 transformX_100";break;case"right":this.topPos=t.offsetTop+t.offsetHeight/2,this.leftPos=t.offsetLeft+t.offsetWidth+this.hintService.hintOptions.defaultLayer,this.transformClass="transformY_50";break;case"neutral":this.topPos=t.offsetTop+t.offsetHeight/2,this.leftPos=t.offsetLeft+t.offsetWidth+this.hintService.hintOptions.defaultLayer,this.transformClass=this.customCss;break;default:throw"Invalid hint position ->"+this.position}else this.topPos=0,this.leftPos=0;this.showme=!0,this.hasNext=this.hintService.hasNext(),this.hasPrev=this.hintService.hasPrev()},t.prototype.hideStep=function(){var t=document.getElementById(this.selector);t&&(t.style.zIndex="0",this.enableClick(t),t.classList.remove("hint-relative")),this.showme=!1},t.prototype.exit=function(){this.exitEventEmitter.emit(),this.hintService.end()},t.prototype.next=function(){this.nextEventEmitter.emit(),this.hideStep(),this.hintService.showNext()},t.prototype.prev=function(){this.prevEventEmitter.emit(),this.hideStep(),this.hintService.showPrev()},t.prototype.disableClick=function(t){t.classList.add("hint-disabled")},t.prototype.enableClick=function(t){t.classList.remove("hint-disabled")},n([r.Input(),o("design:type",String)],t.prototype,"title",void 0),n([r.Input(),o("design:type",String)],t.prototype,"selector",void 0),n([r.Input(),o("design:type",Number)],t.prototype,"order",void 0),n([r.Input(),o("design:type",String)],t.prototype,"position",void 0),n([r.Input(),o("design:type",String)],t.prototype,"customCss",void 0),n([r.Output(),o("design:type",r.EventEmitter)],t.prototype,"nextEventEmitter",void 0),n([r.Output(),o("design:type",r.EventEmitter)],t.prototype,"prevEventEmitter",void 0),n([r.Output(),o("design:type",r.EventEmitter)],t.prototype,"exitEventEmitter",void 0),t=n([r.Component({selector:c.HintConfig.HINT_TAG,template:'<div class="intro-tour-hint-wrapper {{transformClass}} step{{order}} {{position}}"\n  *ngIf="showme" [ngStyle]="{\'top\': topPos+\'px\', \'left\': leftPos+\'px\'}" >\n    <div class="header" *ngIf="title">{{title}}</div>\n    <div class="content"><ng-content></ng-content></div>\n    <div class="footer">\n      <a class="navigate-btn prev" *ngIf="hasPrev" (click)="prev()">&#8592;</a>\n      <a class="navigate-btn next" *ngIf="hasNext" (click)="next()">&#8594;</a>\n      <a class="navigate-btn exit" (click)="exit()">&#10006;</a>\n    </div>\n  </div>'}),o("design:paramtypes",[s.HintService])],t)}();e.TourComponent=h},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(2),o=function(){function t(){this.elementsDisabled=!0,this.defaultPosition=n.HintConfig.DEFAULT_POSITION,this.defaultOrder=n.HintConfig.DEFAULT_ORDER,this.defaultLayer=n.HintConfig.DEFAULT_PX_LAYER,this.applyRelative=n.HintConfig.APPLY_RELATIVE,this.stepTag=n.HintConfig.HINT_TAG,this.dismissOnOverlay=n.HintConfig.DISMISS_ON_OVERLAY}return t}();e.HintOptions=o},function(t,i){t.exports=e},function(t,e){t.exports=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,