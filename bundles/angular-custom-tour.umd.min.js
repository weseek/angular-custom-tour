!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("@angular/core"),require("@angular/common"),require("rxjs/Subject")):"function"==typeof define&&define.amd?define(["@angular/core","@angular/common","rxjs/Subject"],e):"object"==typeof exports?exports["angular-custom-tour"]=e(require("@angular/core"),require("@angular/common"),require("rxjs/Subject")):t["angular-custom-tour"]=e(t["@angular/core"],t["@angular/common"],t["rxjs/Subject"])}(this,function(t,e,i){return function(t){function e(n){if(i[n])return i[n].exports;var o=i[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var i={};return e.m=t,e.c=i,e.i=function(t){return t},e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="/",e(e.s=4)}([function(e,i){e.exports=t},function(t,e,i){"use strict";var n=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};Object.defineProperty(e,"__esModule",{value:!0});var o=i(0),r=i(9),s=i(7),c=function(){function t(){this.anchors={},this.overlay$=new r.Subject,this.registration$=new r.Subject,this.finish$=new r.Subject,this.showingStep$=new r.Subject}return t.prototype.initialize=function(t,e){this.hintOptions=Object.assign(new s.HintOptions,t||new s.HintOptions);var i=document.getElementsByTagName(this.hintOptions.stepTag);this.steps=this.initSteps(i);var n;this.steps.some(function(t,i){if(t.order===e)return n=i,!0}),null==n&&(n=0),this.startAt(n),this.overlay$.next(!0)},t.prototype.show=function(t){var e=this.anchors[t.selector];e&&e.showStep()},t.prototype.showNext=function(){this.currentStep=this.steps[this.steps.indexOf(this.currentStep)+1];var t=this.anchors[this.currentStep.selector];t&&t.showStep()},t.prototype.overlayNext=function(){this.hasNext()?(this.anchors[this.currentStep.selector].hideStep(),this.showNext()):this.end()},t.prototype.showPrev=function(){this.currentStep=this.steps[this.steps.indexOf(this.currentStep)-1];var t=this.anchors[this.currentStep.selector];t&&t.showStep()},t.prototype.register=function(t,e){if(this.anchors[t])throw"selector "+t+" already registered!";this.anchors[t]=e,this.registration$.next(!0)},t.prototype.hasNext=function(){return this.steps.indexOf(this.currentStep)<this.steps.length-1},t.prototype.hasPrev=function(){return this.steps.indexOf(this.currentStep)>0},t.prototype.end=function(){this.overlay$.next(!1);var t=this.anchors[this.currentStep.selector];t&&(this.currentStep=void 0,t.hideStep(),this.finish$.next(!0))},t.prototype.startAt=function(t){this.currentStep=this.steps[t],this.show(this.currentStep)},t.prototype.initSteps=function(t){for(var e=[],i=0;i<t.length;i++)e.push({selector:t[i].getAttribute("selector"),order:+t[i].getAttribute("order")||this.hintOptions.defaultOrder});return e=e.sort(function(t,e){return t.order-e.order})},t.prototype.putOverlay=function(){document.getElementsByTagName("body")},t=n([o.Injectable()],t)}();e.HintService=c},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.HintConfig={HINT_TAG:"tour-step",DEFAULT_POSITION:"bottom",Z_INDEX:"999",DEFAULT_ORDER:99,DEFAULT_PX_LAYER:15,APPLY_RELATIVE:!0,DISMISS_ON_OVERLAY:!1}},function(t,e,i){"use strict";var n=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s};Object.defineProperty(e,"__esModule",{value:!0});var o=i(1);e.HintService=o.HintService;var r=i(8),s=i(0),c=i(5),h=i(6);e.TourComponent=h.TourComponent;var a=function(){function t(){}return e=t,t.forRoot=function(){return{ngModule:e,providers:[o.HintService]}},t=e=n([s.NgModule({declarations:[c.HintComponent,h.TourComponent],exports:[c.HintComponent,h.TourComponent],imports:[r.CommonModule]})],t);var e}();e.HintModule=a},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var i in t)e.hasOwnProperty(i)||(e[i]=t[i])}(i(3))},function(t,e,i){"use strict";var n=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s},o=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var r=i(1),s=i(0),c=function(){function t(t){var e=this;this.hintService=t,this.hintService.overlay$.subscribe(function(t){return e.show=t})}return t.prototype.dismiss=function(){this.hintService.hintOptions.dismissOnOverlay&&this.hintService.overlayNext()},t=n([s.Component({selector:"tour-overlay",template:'<div class="hint-overlay" *ngIf="show" (click)="dismiss()"></div>'}),o("design:paramtypes",[r.HintService])],t)}();e.HintComponent=c},function(t,e,i){"use strict";var n=this&&this.__decorate||function(t,e,i,n){var o,r=arguments.length,s=r<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,i,n);else for(var c=t.length-1;c>=0;c--)(o=t[c])&&(s=(r<3?o(s):r>3?o(e,i,s):o(e,i))||s);return r>3&&s&&Object.defineProperty(e,i,s),s},o=this&&this.__metadata||function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)};Object.defineProperty(e,"__esModule",{value:!0});var r=i(0),s=i(1),c=i(2),h=function(){function t(t){this.hintService=t,this.nextEventEmitter=new r.EventEmitter,this.prevEventEmitter=new r.EventEmitter,this.exitEventEmitter=new r.EventEmitter}return t.prototype.ngOnInit=function(){this.hintService.register(this.selector,this)},t.prototype.showStep=function(){this.hintService.showingStep$.next(this),this.position=this.position||this.hintService.hintOptions.defaultPosition,this.order=+this.order||this.hintService.hintOptions.defaultOrder;var t=document.getElementById(this.selector);if(t)switch(t.style.zIndex=c.HintConfig.Z_INDEX,this.hintService.hintOptions.elementsDisabled&&this.disableClick(t),this.hintService.hintOptions.applyRelative&&t.classList.add("hint-relative"),this.position){case"top":this.transformClass="transformX_50 transformY_100",this.topPos=t.offsetTop-this.hintService.hintOptions.defaultLayer,this.leftPos=t.offsetLeft+t.offsetWidth/2;break;case"bottom":this.transformClass="transformX_50",this.topPos=t.offsetTop+t.offsetHeight+this.hintService.hintOptions.defaultLayer,this.leftPos=t.offsetLeft+t.offsetWidth/2;break;case"left":this.topPos=t.offsetTop+t.offsetHeight/2,this.leftPos=t.offsetLeft-this.hintService.hintOptions.defaultLayer,this.transformClass="transformY_50 transformX_100";break;case"right":this.topPos=t.offsetTop+t.offsetHeight/2,this.leftPos=t.offsetLeft+t.offsetWidth+this.hintService.hintOptions.defaultLayer,this.transformClass="transformY_50";break;case"neutral":this.topPos=t.offsetTop+t.offsetHeight/2,this.leftPos=t.offsetLeft+t.offsetWidth+this.hintService.hintOptions.defaultLayer,this.transformClass=this.customCss;break;default:throw"Invalid hint position ->"+this.position}else this.topPos=0,this.leftPos=0;this.showme=!0,this.hasNext=this.hintService.hasNext(),this.hasPrev=this.hintService.hasPrev()},t.prototype.hideStep=function(){var t=document.getElementById(this.selector);t&&(t.style.zIndex="0",this.enableClick(t),t.classList.remove("hint-relative")),this.showme=!1},t.prototype.exit=function(){this.exitEventEmitter.emit(),this.hintService.end()},t.prototype.next=function(){this.nextEventEmitter.emit(),this.hideStep(),this.hintService.showNext()},t.prototype.prev=function(){this.prevEventEmitter.emit(),this.hideStep(),this.hintService.showPrev()},t.prototype.disableClick=function(t){t.classList.add("hint-disabled")},t.prototype.enableClick=function(t){t.classList.remove("hint-disabled")},n([r.Input(),o("design:type",String)],t.prototype,"title",void 0),n([r.Input(),o("design:type",String)],t.prototype,"selector",void 0),n([r.Input(),o("design:type",Number)],t.prototype,"order",void 0),n([r.Input(),o("design:type",String)],t.prototype,"position",void 0),n([r.Input(),o("design:type",String)],t.prototype,"customCss",void 0),n([r.Output(),o("design:type",r.EventEmitter)],t.prototype,"nextEventEmitter",void 0),n([r.Output(),o("design:type",r.EventEmitter)],t.prototype,"prevEventEmitter",void 0),n([r.Output(),o("design:type",r.EventEmitter)],t.prototype,"exitEventEmitter",void 0),t=n([r.Component({selector:c.HintConfig.HINT_TAG,template:'<div class="intro-tour-hint-wrapper {{transformClass}} step{{order}} {{position}}"\n  *ngIf="showme" [ngStyle]="{\'top\': topPos+\'px\', \'left\': leftPos+\'px\'}" >\n    <div class="header" *ngIf="title">{{title}}</div>\n    <div class="content"><ng-content></ng-content></div>\n    <div class="footer">\n      <a class="navigate-btn prev" *ngIf="hasPrev" (click)="prev()">&#8592;</a>\n      <a class="navigate-btn next" *ngIf="hasNext" (click)="next()">&#8594;</a>\n      <a class="navigate-btn exit" (click)="exit()">&#10006;</a>\n    </div>\n  </div>'}),o("design:paramtypes",[s.HintService])],t)}();e.TourComponent=h},function(t,e,i){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=i(2),o=function(){function t(){this.elementsDisabled=!0,this.defaultPosition=n.HintConfig.DEFAULT_POSITION,this.defaultOrder=n.HintConfig.DEFAULT_ORDER,this.defaultLayer=n.HintConfig.DEFAULT_PX_LAYER,this.applyRelative=n.HintConfig.APPLY_RELATIVE,this.stepTag=n.HintConfig.HINT_TAG,this.dismissOnOverlay=n.HintConfig.DISMISS_ON_OVERLAY}return t}();e.HintOptions=o},function(t,i){t.exports=e},function(t,e){t.exports=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy9hbmd1bGFyLWN1c3RvbS10b3VyLnVtZC5taW4uanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIGM4MmMyMTJiYjVkMWMyYWExNzk4Iiwid2VicGFjazovLy9leHRlcm5hbCBcIkBhbmd1bGFyL2NvcmVcIiIsIndlYnBhY2s6Ly8vLi9zcmMvaGludC5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy92YXJpYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9oaW50LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW50cm8tdG91ci90b3VyLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvb3B0aW9ucy5qcyIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJAYW5ndWxhci9jb21tb25cIiIsIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJyeGpzL1N1YmplY3RcIiJdLCJuYW1lcyI6WyJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmaW5lIiwiYW1kIiwidGhpcyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fIiwiX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV84X18iLCJfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzlfXyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJ2YWx1ZSIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIm4iLCJfX2VzTW9kdWxlIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX19kZWNvcmF0ZSIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlJlZmxlY3QiLCJkZWNvcmF0ZSIsImNvcmVfMSIsIlN1YmplY3RfMSIsIm9wdGlvbnNfMSIsIkhpbnRTZXJ2aWNlIiwiYW5jaG9ycyIsIm92ZXJsYXkkIiwiU3ViamVjdCIsInJlZ2lzdHJhdGlvbiQiLCJmaW5pc2gkIiwic2hvd2luZ1N0ZXAkIiwiaW5pdGlhbGl6ZSIsIm9wdGlvbnMiLCJzdGFydE9yZGVyIiwiaGludE9wdGlvbnMiLCJhc3NpZ24iLCJIaW50T3B0aW9ucyIsIm5vZGVzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInN0ZXBUYWciLCJzdGVwcyIsImluaXRTdGVwcyIsInN0YXJ0U3RlcEluZGV4Iiwic29tZSIsInN0ZXAiLCJpbmRleCIsIm9yZGVyIiwic3RhcnRBdCIsIm5leHQiLCJzaG93IiwiYW5jaG9yIiwic2VsZWN0b3IiLCJzaG93U3RlcCIsInNob3dOZXh0IiwiY3VycmVudFN0ZXAiLCJpbmRleE9mIiwib3ZlcmxheU5leHQiLCJoYXNOZXh0IiwiaGlkZVN0ZXAiLCJlbmQiLCJzaG93UHJldiIsInJlZ2lzdGVyIiwiY29tcG9uZW50IiwiaGFzUHJldiIsInVuZGVmaW5lZCIsInN0ZXBJZCIsInB1c2giLCJnZXRBdHRyaWJ1dGUiLCJkZWZhdWx0T3JkZXIiLCJzb3J0IiwiZWwxIiwiZWwyIiwicHV0T3ZlcmxheSIsIkluamVjdGFibGUiLCJIaW50Q29uZmlnIiwiSElOVF9UQUciLCJERUZBVUxUX1BPU0lUSU9OIiwiWl9JTkRFWCIsIkRFRkFVTFRfT1JERVIiLCJERUZBVUxUX1BYX0xBWUVSIiwiQVBQTFlfUkVMQVRJVkUiLCJESVNNSVNTX09OX09WRVJMQVkiLCJoaW50X3NlcnZpY2VfMSIsImNvbW1vbl8xIiwiaGludF9jb21wb25lbnRfMSIsInRvdXJfY29tcG9uZW50XzEiLCJUb3VyQ29tcG9uZW50IiwiSGludE1vZHVsZSIsIkhpbnRNb2R1bGVfMSIsImZvclJvb3QiLCJuZ01vZHVsZSIsInByb3ZpZGVycyIsIk5nTW9kdWxlIiwiZGVjbGFyYXRpb25zIiwiSGludENvbXBvbmVudCIsImltcG9ydHMiLCJDb21tb25Nb2R1bGUiLCJfX21ldGFkYXRhIiwiayIsInYiLCJtZXRhZGF0YSIsImhpbnRTZXJ2aWNlIiwiX3RoaXMiLCJzdWJzY3JpYmUiLCJkYXRhIiwiZGlzbWlzcyIsImRpc21pc3NPbk92ZXJsYXkiLCJDb21wb25lbnQiLCJ0ZW1wbGF0ZSIsInZhcmlhYmxlc18xIiwibmV4dEV2ZW50RW1pdHRlciIsIkV2ZW50RW1pdHRlciIsInByZXZFdmVudEVtaXR0ZXIiLCJleGl0RXZlbnRFbWl0dGVyIiwibmdPbkluaXQiLCJwb3NpdGlvbiIsImRlZmF1bHRQb3NpdGlvbiIsImhpZ2hsaWdodGVkRWxlbWVudCIsImdldEVsZW1lbnRCeUlkIiwic3R5bGUiLCJ6SW5kZXgiLCJlbGVtZW50c0Rpc2FibGVkIiwiZGlzYWJsZUNsaWNrIiwiYXBwbHlSZWxhdGl2ZSIsImNsYXNzTGlzdCIsImFkZCIsInRyYW5zZm9ybUNsYXNzIiwidG9wUG9zIiwib2Zmc2V0VG9wIiwiZGVmYXVsdExheWVyIiwibGVmdFBvcyIsIm9mZnNldExlZnQiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsImN1c3RvbUNzcyIsInNob3dtZSIsImVuYWJsZUNsaWNrIiwicmVtb3ZlIiwiZXhpdCIsImVtaXQiLCJwcmV2IiwiZWxlbWVudCIsIklucHV0IiwiU3RyaW5nIiwiTnVtYmVyIiwiT3V0cHV0Il0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLGdCQUFBQyxVQUFBLGdCQUFBQyxRQUNBQSxPQUFBRCxRQUFBRCxFQUFBRyxRQUFBLGlCQUFBQSxRQUFBLG1CQUFBQSxRQUFBLGlCQUNBLGtCQUFB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LEtBQUEwRixhQUFBeUMsRUFBQW5DLFdBQUFJLGNBQ0FwRyxLQUFBdUosYUFBQXBCLEVBQUFuQyxXQUFBSyxpQkFDQXJHLEtBQUFpSixjQUFBZCxFQUFBbkMsV0FBQU0sZUFDQXRHLEtBQUE2RCxRQUFBc0UsRUFBQW5DLFdBQUFDLFNBQ0FqRyxLQUFBZ0ksaUJBQUFHLEVBQUFuQyxXQUFBTyxtQkFFQSxNQUFBOUMsS0FFQTlELEdBQUE4RCxlVGdpQk0sU0FBVTdELEVBQVFELEdVL2lCeEJDLEVBQUFELFFBQUFPLEdWcWpCTSxTQUFVTixFQUFRRCxHV3JqQnhCQyxFQUFBRCxRQUFBUSIsImZpbGUiOiJhbmd1bGFyLWN1c3RvbS10b3VyLnVtZC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpLCByZXF1aXJlKFwiQGFuZ3VsYXIvY29tbW9uXCIpLCByZXF1aXJlKFwicnhqcy9TdWJqZWN0XCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcIkBhbmd1bGFyL2NvcmVcIiwgXCJAYW5ndWxhci9jb21tb25cIiwgXCJyeGpzL1N1YmplY3RcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wiYW5ndWxhci1jdXN0b20tdG91clwiXSA9IGZhY3RvcnkocmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIiksIHJlcXVpcmUoXCJAYW5ndWxhci9jb21tb25cIiksIHJlcXVpcmUoXCJyeGpzL1N1YmplY3RcIikpO1xuXHRlbHNlXG5cdFx0cm9vdFtcImFuZ3VsYXItY3VzdG9tLXRvdXJcIl0gPSBmYWN0b3J5KHJvb3RbXCJAYW5ndWxhci9jb3JlXCJdLCByb290W1wiQGFuZ3VsYXIvY29tbW9uXCJdLCByb290W1wicnhqcy9TdWJqZWN0XCJdKTtcbn0pKHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzhfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV85X18pIHtcbnJldHVybiBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKSwgcmVxdWlyZShcIkBhbmd1bGFyL2NvbW1vblwiKSwgcmVxdWlyZShcInJ4anMvU3ViamVjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXCJAYW5ndWxhci9jb3JlXCIsIFwiQGFuZ3VsYXIvY29tbW9uXCIsIFwicnhqcy9TdWJqZWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcImFuZ3VsYXItY3VzdG9tLXRvdXJcIl0gPSBmYWN0b3J5KHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpLCByZXF1aXJlKFwiQGFuZ3VsYXIvY29tbW9uXCIpLCByZXF1aXJlKFwicnhqcy9TdWJqZWN0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJhbmd1bGFyLWN1c3RvbS10b3VyXCJdID0gZmFjdG9yeShyb290W1wiQGFuZ3VsYXIvY29yZVwiXSwgcm9vdFtcIkBhbmd1bGFyL2NvbW1vblwiXSwgcm9vdFtcInJ4anMvU3ViamVjdFwiXSk7XG59KSh0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV84X18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfOV9fKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5pID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIHZhbHVlOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuLyoqKioqKi8gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4vKioqKioqLyBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4vKioqKioqLyBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4vKioqKioqLyBcdFx0XHRcdGdldDogZ2V0dGVyXG4vKioqKioqLyBcdFx0XHR9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbi8qKioqKiovIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuLyoqKioqKi8gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbi8qKioqKiovIFx0XHRyZXR1cm4gZ2V0dGVyO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfMF9fO1xuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIFN1YmplY3RfMSA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG52YXIgb3B0aW9uc18xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbnZhciBIaW50U2VydmljZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIaW50U2VydmljZSgpIHtcbiAgICAgICAgdGhpcy5hbmNob3JzID0ge307XG4gICAgICAgIHRoaXMub3ZlcmxheSQgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgdGhpcy5yZWdpc3RyYXRpb24kID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgIHRoaXMuZmluaXNoJCA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICB0aGlzLnNob3dpbmdTdGVwJCA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIGhpbnQgc2VydmljZVxuICAgICAqIEBtZXRob2QgaW5pdGlhbGl6ZVxuICAgICAqIEBwYXJhbSAge0hpbnRPcHRpb25zfSBvcHRpb25zIGluaXQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSAge251bWJlcn0gc3RhcnRPcmRlciBzdGFydCBvcmRlclxuICAgICAqIEByZXR1cm4gdm9pZFxuICAgICAqL1xuICAgIEhpbnRTZXJ2aWNlLnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKG9wdGlvbnMsIHN0YXJ0T3JkZXIpIHtcbiAgICAgICAgdGhpcy5oaW50T3B0aW9ucyA9IE9iamVjdC5hc3NpZ24obmV3IG9wdGlvbnNfMS5IaW50T3B0aW9ucygpLCBvcHRpb25zIHx8IG5ldyBvcHRpb25zXzEuSGludE9wdGlvbnMoKSk7XG4gICAgICAgIHZhciBub2RlcyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRoaXMuaGludE9wdGlvbnMuc3RlcFRhZyk7XG4gICAgICAgIHRoaXMuc3RlcHMgPSB0aGlzLmluaXRTdGVwcyhub2Rlcyk7XG4gICAgICAgIHZhciBzdGFydFN0ZXBJbmRleDtcbiAgICAgICAgLy8gRmluZCBzYW1lIG9yZGVyIG9uIHN0YXJ0T3JkZXIgYW5kIFN0ZXBzXG4gICAgICAgIHRoaXMuc3RlcHMuc29tZShmdW5jdGlvbiAoc3RlcCwgaW5kZXgpIHtcbiAgICAgICAgICAgIGlmIChzdGVwLm9yZGVyID09PSBzdGFydE9yZGVyKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRTdGVwSW5kZXggPSBpbmRleDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzdGFydFN0ZXBJbmRleCA9PSBudWxsKSB7XG4gICAgICAgICAgICBzdGFydFN0ZXBJbmRleCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdGFydEF0KHN0YXJ0U3RlcEluZGV4KTtcbiAgICAgICAgdGhpcy5vdmVybGF5JC5uZXh0KHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2hvdyBzdGVwXG4gICAgICogQG1ldGhvZCBzaG93XG4gICAgICogQHBhcmFtICB7U3RlcH0gc3RlcCBbZGVzY3JpcHRpb25dXG4gICAgICovXG4gICAgSGludFNlcnZpY2UucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgICB2YXIgYW5jaG9yID0gdGhpcy5hbmNob3JzW3N0ZXAuc2VsZWN0b3JdO1xuICAgICAgICBpZiAoIWFuY2hvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFuY2hvci5zaG93U3RlcCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2hvdyBzdGVwIG5leHQgdG8ge1N0ZXB9IHRoaXMuY3VycmVudFN0ZXBcbiAgICAgKiBAbWV0aG9kIHNob3dOZXh0XG4gICAgICovXG4gICAgSGludFNlcnZpY2UucHJvdG90eXBlLnNob3dOZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gdGhpcy5zdGVwc1t0aGlzLnN0ZXBzLmluZGV4T2YodGhpcy5jdXJyZW50U3RlcCkgKyAxXTtcbiAgICAgICAgdmFyIGFuY2hvciA9IHRoaXMuYW5jaG9yc1t0aGlzLmN1cnJlbnRTdGVwLnNlbGVjdG9yXTtcbiAgICAgICAgaWYgKCFhbmNob3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmNob3Iuc2hvd1N0ZXAoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE9uIG92ZXJsYXkgY2xpY2sgYmVoYXZpb3VyXG4gICAgICogQG1ldGhvZCBvdmVybGF5TmV4dFxuICAgICAqL1xuICAgIEhpbnRTZXJ2aWNlLnByb3RvdHlwZS5vdmVybGF5TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGFzTmV4dCgpKSB7XG4gICAgICAgICAgICB0aGlzLmFuY2hvcnNbdGhpcy5jdXJyZW50U3RlcC5zZWxlY3Rvcl0uaGlkZVN0ZXAoKTtcbiAgICAgICAgICAgIHRoaXMuc2hvd05leHQoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZW5kKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNob3cgc3RlcCBwcmV2aW91cyB0byB7U3RlcH0gdGhpcy5jdXJyZW50U3RlcFxuICAgICAqIEBtZXRob2Qgc2hvd1ByZXZcbiAgICAgKi9cbiAgICBIaW50U2VydmljZS5wcm90b3R5cGUuc2hvd1ByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSB0aGlzLnN0ZXBzW3RoaXMuc3RlcHMuaW5kZXhPZih0aGlzLmN1cnJlbnRTdGVwKSAtIDFdO1xuICAgICAgICB2YXIgYW5jaG9yID0gdGhpcy5hbmNob3JzW3RoaXMuY3VycmVudFN0ZXAuc2VsZWN0b3JdO1xuICAgICAgICBpZiAoIWFuY2hvcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGFuY2hvci5zaG93U3RlcCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgaGludCBjb21wb25lbnRcbiAgICAgKiBAbWV0aG9kIHJlZ2lzdGVyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgIHNlbGVjdG9yICBiaW5kZWQgdG9cbiAgICAgKiBAcGFyYW0gIHtUb3VyQ29tcG9uZW50fSBjb21wb25lbnQgaXRzZWxmXG4gICAgICovXG4gICAgSGludFNlcnZpY2UucHJvdG90eXBlLnJlZ2lzdGVyID0gZnVuY3Rpb24gKHNlbGVjdG9yLCBjb21wb25lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuYW5jaG9yc1tzZWxlY3Rvcl0pIHtcbiAgICAgICAgICAgIHRocm93ICdzZWxlY3RvciAnICsgc2VsZWN0b3IgKyAnIGFscmVhZHkgcmVnaXN0ZXJlZCEnO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYW5jaG9yc1tzZWxlY3Rvcl0gPSBjb21wb25lbnQ7XG4gICAgICAgIHRoaXMucmVnaXN0cmF0aW9uJC5uZXh0KHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSXMge1N0ZXB9IHRoaXMuY3VycmVudFN0ZXAgaGFzIG5leHRcbiAgICAgKiBAbWV0aG9kIGhhc05leHRcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgICAqL1xuICAgIEhpbnRTZXJ2aWNlLnByb3RvdHlwZS5oYXNOZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGVwcy5pbmRleE9mKHRoaXMuY3VycmVudFN0ZXApIDwgdGhpcy5zdGVwcy5sZW5ndGggLSAxO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSXMge1N0ZXB9IHRoaXMuY3VycmVudFN0ZXAgaGFzIHByZXZpb3VzXG4gICAgICogQG1ldGhvZCBoYXNQcmV2XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBIaW50U2VydmljZS5wcm90b3R5cGUuaGFzUHJldiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHMuaW5kZXhPZih0aGlzLmN1cnJlbnRTdGVwKSA+IDA7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGaW5hbGl6ZSBvdXIgaGludCB0b3VyLlxuICAgICAqIEBtZXRob2QgZW5kXG4gICAgICovXG4gICAgSGludFNlcnZpY2UucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5vdmVybGF5JC5uZXh0KGZhbHNlKTtcbiAgICAgICAgdmFyIGFuY2hvciA9IHRoaXMuYW5jaG9yc1t0aGlzLmN1cnJlbnRTdGVwLnNlbGVjdG9yXTtcbiAgICAgICAgaWYgKCFhbmNob3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICBhbmNob3IuaGlkZVN0ZXAoKTtcbiAgICAgICAgdGhpcy5maW5pc2gkLm5leHQodHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdGFydCBoaW50IHRvdXIgYXQgc29tZSBwb3NpdGlvblxuICAgICAqIEBtZXRob2Qgc3RhcnRBdFxuICAgICAqIEBwYXJhbSAge251bWJlcn0gc3RlcElkIHBvc2l0aW9uIGluIHRoaXMuc3RlcHNcbiAgICAgKi9cbiAgICBIaW50U2VydmljZS5wcm90b3R5cGUuc3RhcnRBdCA9IGZ1bmN0aW9uIChzdGVwSWQpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RlcCA9IHRoaXMuc3RlcHNbc3RlcElkXTtcbiAgICAgICAgdGhpcy5zaG93KHRoaXMuY3VycmVudFN0ZXApO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ29udmVydCBFbGVtZW50W10gdG8gU3RlcFtdXG4gICAgICogQG1ldGhvZCBpbml0U3RlcHNcbiAgICAgKiBAcGFyYW0gIHtOb2RlTGlzdE9mPEVsZW1lbnQ+fSBub2Rlc1xuICAgICAqIEByZXR1cm4ge1N0ZXBbXX1cbiAgICAgKi9cbiAgICBIaW50U2VydmljZS5wcm90b3R5cGUuaW5pdFN0ZXBzID0gZnVuY3Rpb24gKG5vZGVzKSB7XG4gICAgICAgIHZhciBzdGVwcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBzdGVwcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rvcjogbm9kZXNbaV0uZ2V0QXR0cmlidXRlKCdzZWxlY3RvcicpLFxuICAgICAgICAgICAgICAgIG9yZGVyOiArbm9kZXNbaV0uZ2V0QXR0cmlidXRlKCdvcmRlcicpIHx8IHRoaXMuaGludE9wdGlvbnMuZGVmYXVsdE9yZGVyLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0ZXBzID0gc3RlcHMuc29ydChmdW5jdGlvbiAoZWwxLCBlbDIpIHtcbiAgICAgICAgICAgIHJldHVybiBlbDEub3JkZXIgLSBlbDIub3JkZXI7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgSGludFNlcnZpY2UucHJvdG90eXBlLnB1dE92ZXJsYXkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdib2R5Jyk7XG4gICAgfTtcbiAgICBIaW50U2VydmljZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5qZWN0YWJsZSgpXG4gICAgXSwgSGludFNlcnZpY2UpO1xuICAgIHJldHVybiBIaW50U2VydmljZTtcbn0oKSk7XG5leHBvcnRzLkhpbnRTZXJ2aWNlID0gSGludFNlcnZpY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oaW50LnNlcnZpY2UuanMubWFwXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOnZhcmlhYmxlLW5hbWVcbmV4cG9ydHMuSGludENvbmZpZyA9IHtcbiAgICBISU5UX1RBRzogJ3RvdXItc3RlcCcsXG4gICAgREVGQVVMVF9QT1NJVElPTjogJ2JvdHRvbScsXG4gICAgWl9JTkRFWDogJzk5OScsXG4gICAgREVGQVVMVF9PUkRFUjogOTksXG4gICAgREVGQVVMVF9QWF9MQVlFUjogMTUsXG4gICAgQVBQTFlfUkVMQVRJVkU6IHRydWUsXG4gICAgRElTTUlTU19PTl9PVkVSTEFZOiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD12YXJpYWJsZXMuanMubWFwXG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGhpbnRfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbmV4cG9ydHMuSGludFNlcnZpY2UgPSBoaW50X3NlcnZpY2VfMS5IaW50U2VydmljZTtcbnZhciBjb21tb25fMSA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG52YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBoaW50X2NvbXBvbmVudF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbnZhciB0b3VyX2NvbXBvbmVudF8xID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbmV4cG9ydHMuVG91ckNvbXBvbmVudCA9IHRvdXJfY29tcG9uZW50XzEuVG91ckNvbXBvbmVudDtcbnZhciBIaW50TW9kdWxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEhpbnRNb2R1bGUoKSB7XG4gICAgfVxuICAgIEhpbnRNb2R1bGVfMSA9IEhpbnRNb2R1bGU7XG4gICAgSGludE1vZHVsZS5mb3JSb290ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmdNb2R1bGU6IEhpbnRNb2R1bGVfMSxcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgICAgIGhpbnRfc2VydmljZV8xLkhpbnRTZXJ2aWNlLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIEhpbnRNb2R1bGUgPSBIaW50TW9kdWxlXzEgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLk5nTW9kdWxlKHtcbiAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW2hpbnRfY29tcG9uZW50XzEuSGludENvbXBvbmVudCwgdG91cl9jb21wb25lbnRfMS5Ub3VyQ29tcG9uZW50XSxcbiAgICAgICAgICAgIGV4cG9ydHM6IFtoaW50X2NvbXBvbmVudF8xLkhpbnRDb21wb25lbnQsIHRvdXJfY29tcG9uZW50XzEuVG91ckNvbXBvbmVudF0sXG4gICAgICAgICAgICBpbXBvcnRzOiBbY29tbW9uXzEuQ29tbW9uTW9kdWxlXSxcbiAgICAgICAgfSlcbiAgICBdLCBIaW50TW9kdWxlKTtcbiAgICByZXR1cm4gSGludE1vZHVsZTtcbiAgICB2YXIgSGludE1vZHVsZV8xO1xufSgpKTtcbmV4cG9ydHMuSGludE1vZHVsZSA9IEhpbnRNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfX2V4cG9ydChtKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xufVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnQoX193ZWJwYWNrX3JlcXVpcmVfXygzKSk7XG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGhpbnRfc2VydmljZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBjb3JlXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEhpbnRDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSGludENvbXBvbmVudChoaW50U2VydmljZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmhpbnRTZXJ2aWNlID0gaGludFNlcnZpY2U7XG4gICAgICAgIHRoaXMuaGludFNlcnZpY2Uub3ZlcmxheSQuc3Vic2NyaWJlKGZ1bmN0aW9uIChkYXRhKSB7IHJldHVybiBfdGhpcy5zaG93ID0gZGF0YTsgfSk7XG4gICAgfVxuICAgIEhpbnRDb21wb25lbnQucHJvdG90eXBlLmRpc21pc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhpbnRTZXJ2aWNlLmhpbnRPcHRpb25zLmRpc21pc3NPbk92ZXJsYXkpXG4gICAgICAgICAgICB0aGlzLmhpbnRTZXJ2aWNlLm92ZXJsYXlOZXh0KCk7XG4gICAgfTtcbiAgICBIaW50Q29tcG9uZW50ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5Db21wb25lbnQoe1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgICBzZWxlY3RvcjogJ3RvdXItb3ZlcmxheScsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPVxcXCJoaW50LW92ZXJsYXlcXFwiICpuZ0lmPVxcXCJzaG93XFxcIiAoY2xpY2spPVxcXCJkaXNtaXNzKClcXFwiPjwvZGl2PlwiLFxuICAgICAgICB9KSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtoaW50X3NlcnZpY2VfMS5IaW50U2VydmljZV0pXG4gICAgXSwgSGludENvbXBvbmVudCk7XG4gICAgcmV0dXJuIEhpbnRDb21wb25lbnQ7XG59KCkpO1xuZXhwb3J0cy5IaW50Q29tcG9uZW50ID0gSGludENvbXBvbmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhpbnQuY29tcG9uZW50LmpzLm1hcFxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgY29yZV8xID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBoaW50X3NlcnZpY2VfMSA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgdmFyaWFibGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIFRvdXJDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG91ckNvbXBvbmVudChoaW50U2VydmljZSkge1xuICAgICAgICB0aGlzLmhpbnRTZXJ2aWNlID0gaGludFNlcnZpY2U7XG4gICAgICAgIHRoaXMubmV4dEV2ZW50RW1pdHRlciA9IG5ldyBjb3JlXzEuRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMucHJldkV2ZW50RW1pdHRlciA9IG5ldyBjb3JlXzEuRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIHRoaXMuZXhpdEV2ZW50RW1pdHRlciA9IG5ldyBjb3JlXzEuRXZlbnRFbWl0dGVyKCk7XG4gICAgfVxuICAgIFRvdXJDb21wb25lbnQucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmhpbnRTZXJ2aWNlLnJlZ2lzdGVyKHRoaXMuc2VsZWN0b3IsIHRoaXMpO1xuICAgIH07XG4gICAgVG91ckNvbXBvbmVudC5wcm90b3R5cGUuc2hvd1N0ZXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGludFNlcnZpY2Uuc2hvd2luZ1N0ZXAkLm5leHQodGhpcyk7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uIHx8IHRoaXMuaGludFNlcnZpY2UuaGludE9wdGlvbnMuZGVmYXVsdFBvc2l0aW9uO1xuICAgICAgICB0aGlzLm9yZGVyID0gK3RoaXMub3JkZXIgfHwgdGhpcy5oaW50U2VydmljZS5oaW50T3B0aW9ucy5kZWZhdWx0T3JkZXI7XG4gICAgICAgIHZhciBoaWdobGlnaHRlZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnNlbGVjdG9yKTtcbiAgICAgICAgaWYgKGhpZ2hsaWdodGVkRWxlbWVudCkge1xuICAgICAgICAgICAgaGlnaGxpZ2h0ZWRFbGVtZW50LnN0eWxlLnpJbmRleCA9IHZhcmlhYmxlc18xLkhpbnRDb25maWcuWl9JTkRFWDtcbiAgICAgICAgICAgIGlmICh0aGlzLmhpbnRTZXJ2aWNlLmhpbnRPcHRpb25zLmVsZW1lbnRzRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVDbGljayhoaWdobGlnaHRlZEVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaGludFNlcnZpY2UuaGludE9wdGlvbnMuYXBwbHlSZWxhdGl2ZSkge1xuICAgICAgICAgICAgICAgIGhpZ2hsaWdodGVkRWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaW50LXJlbGF0aXZlJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMucG9zaXRpb24pIHtcbiAgICAgICAgICAgICAgICBjYXNlICd0b3AnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybUNsYXNzID0gJ3RyYW5zZm9ybVhfNTAgdHJhbnNmb3JtWV8xMDAnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvcFBvcyA9IGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRUb3AgLSB0aGlzLmhpbnRTZXJ2aWNlLmhpbnRPcHRpb25zLmRlZmF1bHRMYXllcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWZ0UG9zID0gaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldExlZnQgKyBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0V2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdib3R0b20nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybUNsYXNzID0gJ3RyYW5zZm9ybVhfNTAnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvcFBvcyA9IGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRUb3AgKyBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0SGVpZ2h0ICsgdGhpcy5oaW50U2VydmljZS5oaW50T3B0aW9ucy5kZWZhdWx0TGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdFBvcyA9IGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRMZWZ0ICsgaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldFdpZHRoIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbGVmdCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9wUG9zID0gaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldFRvcCArIGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnRQb3MgPSBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0TGVmdCAtIHRoaXMuaGludFNlcnZpY2UuaGludE9wdGlvbnMuZGVmYXVsdExheWVyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybUNsYXNzID0gJ3RyYW5zZm9ybVlfNTAgdHJhbnNmb3JtWF8xMDAnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdyaWdodCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9wUG9zID0gaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldFRvcCArIGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRIZWlnaHQgLyAyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnRQb3MgPSBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0TGVmdCArIGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRXaWR0aCArIHRoaXMuaGludFNlcnZpY2UuaGludE9wdGlvbnMuZGVmYXVsdExheWVyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybUNsYXNzID0gJ3RyYW5zZm9ybVlfNTAnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICduZXV0cmFsJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3BQb3MgPSBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0VG9wICsgaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldEhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdFBvcyA9IGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRMZWZ0ICsgaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldFdpZHRoICsgdGhpcy5oaW50U2VydmljZS5oaW50T3B0aW9ucy5kZWZhdWx0TGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtQ2xhc3MgPSB0aGlzLmN1c3RvbUNzcztcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgJ0ludmFsaWQgaGludCBwb3NpdGlvbiAtPicgKyB0aGlzLnBvc2l0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50b3BQb3MgPSAwO1xuICAgICAgICAgICAgdGhpcy5sZWZ0UG9zID0gMDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNob3dtZSA9IHRydWU7XG4gICAgICAgIHRoaXMuaGFzTmV4dCA9IHRoaXMuaGludFNlcnZpY2UuaGFzTmV4dCgpO1xuICAgICAgICB0aGlzLmhhc1ByZXYgPSB0aGlzLmhpbnRTZXJ2aWNlLmhhc1ByZXYoKTtcbiAgICB9O1xuICAgIFRvdXJDb21wb25lbnQucHJvdG90eXBlLmhpZGVTdGVwID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaGlnaGxpZ2h0ZWRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5zZWxlY3Rvcik7XG4gICAgICAgIGlmIChoaWdobGlnaHRlZEVsZW1lbnQpIHtcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkRWxlbWVudC5zdHlsZS56SW5kZXggPSAnMCc7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZUNsaWNrKGhpZ2hsaWdodGVkRWxlbWVudCk7XG4gICAgICAgICAgICBoaWdobGlnaHRlZEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGludC1yZWxhdGl2ZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2hvd21lID0gZmFsc2U7XG4gICAgfTtcbiAgICBUb3VyQ29tcG9uZW50LnByb3RvdHlwZS5leGl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmV4aXRFdmVudEVtaXR0ZXIuZW1pdCgpO1xuICAgICAgICB0aGlzLmhpbnRTZXJ2aWNlLmVuZCgpO1xuICAgIH07XG4gICAgVG91ckNvbXBvbmVudC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5uZXh0RXZlbnRFbWl0dGVyLmVtaXQoKTtcbiAgICAgICAgdGhpcy5oaWRlU3RlcCgpO1xuICAgICAgICB0aGlzLmhpbnRTZXJ2aWNlLnNob3dOZXh0KCk7XG4gICAgfTtcbiAgICBUb3VyQ29tcG9uZW50LnByb3RvdHlwZS5wcmV2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnByZXZFdmVudEVtaXR0ZXIuZW1pdCgpO1xuICAgICAgICB0aGlzLmhpZGVTdGVwKCk7XG4gICAgICAgIHRoaXMuaGludFNlcnZpY2Uuc2hvd1ByZXYoKTtcbiAgICB9O1xuICAgIFRvdXJDb21wb25lbnQucHJvdG90eXBlLmRpc2FibGVDbGljayA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnaGludC1kaXNhYmxlZCcpO1xuICAgIH07XG4gICAgVG91ckNvbXBvbmVudC5wcm90b3R5cGUuZW5hYmxlQ2xpY2sgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUoJ2hpbnQtZGlzYWJsZWQnKTtcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBUb3VyQ29tcG9uZW50LnByb3RvdHlwZSwgXCJ0aXRsZVwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBUb3VyQ29tcG9uZW50LnByb3RvdHlwZSwgXCJzZWxlY3RvclwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIE51bWJlcilcbiAgICBdLCBUb3VyQ29tcG9uZW50LnByb3RvdHlwZSwgXCJvcmRlclwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBUb3VyQ29tcG9uZW50LnByb3RvdHlwZSwgXCJwb3NpdGlvblwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuSW5wdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIFN0cmluZylcbiAgICBdLCBUb3VyQ29tcG9uZW50LnByb3RvdHlwZSwgXCJjdXN0b21Dc3NcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLk91dHB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgY29yZV8xLkV2ZW50RW1pdHRlcilcbiAgICBdLCBUb3VyQ29tcG9uZW50LnByb3RvdHlwZSwgXCJuZXh0RXZlbnRFbWl0dGVyXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5PdXRwdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIGNvcmVfMS5FdmVudEVtaXR0ZXIpXG4gICAgXSwgVG91ckNvbXBvbmVudC5wcm90b3R5cGUsIFwicHJldkV2ZW50RW1pdHRlclwiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuT3V0cHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBjb3JlXzEuRXZlbnRFbWl0dGVyKVxuICAgIF0sIFRvdXJDb21wb25lbnQucHJvdG90eXBlLCBcImV4aXRFdmVudEVtaXR0ZXJcIiwgdm9pZCAwKTtcbiAgICBUb3VyQ29tcG9uZW50ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5Db21wb25lbnQoe1xuICAgICAgICAgICAgc2VsZWN0b3I6IHZhcmlhYmxlc18xLkhpbnRDb25maWcuSElOVF9UQUcsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPVxcXCJpbnRyby10b3VyLWhpbnQtd3JhcHBlciB7e3RyYW5zZm9ybUNsYXNzfX0gc3RlcHt7b3JkZXJ9fSB7e3Bvc2l0aW9ufX1cXFwiXFxuICAqbmdJZj1cXFwic2hvd21lXFxcIiBbbmdTdHlsZV09XFxcInsndG9wJzogdG9wUG9zKydweCcsICdsZWZ0JzogbGVmdFBvcysncHgnfVxcXCIgPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJoZWFkZXJcXFwiICpuZ0lmPVxcXCJ0aXRsZVxcXCI+e3t0aXRsZX19PC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcImNvbnRlbnRcXFwiPjxuZy1jb250ZW50PjwvbmctY29udGVudD48L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiZm9vdGVyXFxcIj5cXG4gICAgICA8YSBjbGFzcz1cXFwibmF2aWdhdGUtYnRuIHByZXZcXFwiICpuZ0lmPVxcXCJoYXNQcmV2XFxcIiAoY2xpY2spPVxcXCJwcmV2KClcXFwiPiYjODU5Mjs8L2E+XFxuICAgICAgPGEgY2xhc3M9XFxcIm5hdmlnYXRlLWJ0biBuZXh0XFxcIiAqbmdJZj1cXFwiaGFzTmV4dFxcXCIgKGNsaWNrKT1cXFwibmV4dCgpXFxcIj4mIzg1OTQ7PC9hPlxcbiAgICAgIDxhIGNsYXNzPVxcXCJuYXZpZ2F0ZS1idG4gZXhpdFxcXCIgKGNsaWNrKT1cXFwiZXhpdCgpXFxcIj4mIzEwMDA2OzwvYT5cXG4gICAgPC9kaXY+XFxuICA8L2Rpdj5cIixcbiAgICAgICAgfSksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246cGFyYW10eXBlc1wiLCBbaGludF9zZXJ2aWNlXzEuSGludFNlcnZpY2VdKVxuICAgIF0sIFRvdXJDb21wb25lbnQpO1xuICAgIHJldHVybiBUb3VyQ29tcG9uZW50O1xufSgpKTtcbmV4cG9ydHMuVG91ckNvbXBvbmVudCA9IFRvdXJDb21wb25lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10b3VyLmNvbXBvbmVudC5qcy5tYXBcblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdmFyaWFibGVzXzEgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIEhpbnRPcHRpb25zID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEhpbnRPcHRpb25zKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnRzRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlZmF1bHRQb3NpdGlvbiA9IHZhcmlhYmxlc18xLkhpbnRDb25maWcuREVGQVVMVF9QT1NJVElPTjtcbiAgICAgICAgdGhpcy5kZWZhdWx0T3JkZXIgPSB2YXJpYWJsZXNfMS5IaW50Q29uZmlnLkRFRkFVTFRfT1JERVI7XG4gICAgICAgIHRoaXMuZGVmYXVsdExheWVyID0gdmFyaWFibGVzXzEuSGludENvbmZpZy5ERUZBVUxUX1BYX0xBWUVSO1xuICAgICAgICB0aGlzLmFwcGx5UmVsYXRpdmUgPSB2YXJpYWJsZXNfMS5IaW50Q29uZmlnLkFQUExZX1JFTEFUSVZFO1xuICAgICAgICB0aGlzLnN0ZXBUYWcgPSB2YXJpYWJsZXNfMS5IaW50Q29uZmlnLkhJTlRfVEFHO1xuICAgICAgICB0aGlzLmRpc21pc3NPbk92ZXJsYXkgPSB2YXJpYWJsZXNfMS5IaW50Q29uZmlnLkRJU01JU1NfT05fT1ZFUkxBWTtcbiAgICB9XG4gICAgcmV0dXJuIEhpbnRPcHRpb25zO1xufSgpKTtcbmV4cG9ydHMuSGludE9wdGlvbnMgPSBIaW50T3B0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wdGlvbnMuanMubWFwXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5tb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfOF9fO1xuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxubW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzlfXztcblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xufSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIGFuZ3VsYXItY3VzdG9tLXRvdXIudW1kLm1pbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGlkZW50aXR5IGZ1bmN0aW9uIGZvciBjYWxsaW5nIGhhcm1vbnkgaW1wb3J0cyB3aXRoIHRoZSBjb3JyZWN0IGNvbnRleHRcbiBcdF9fd2VicGFja19yZXF1aXJlX18uaSA9IGZ1bmN0aW9uKHZhbHVlKSB7IHJldHVybiB2YWx1ZTsgfTtcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiL1wiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGM4MmMyMTJiYjVkMWMyYWExNzk4IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFXzBfXztcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyBleHRlcm5hbCBcIkBhbmd1bGFyL2NvcmVcIlxuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKFwiQGFuZ3VsYXIvY29yZVwiKTtcbnZhciBTdWJqZWN0XzEgPSByZXF1aXJlKFwicnhqcy9TdWJqZWN0XCIpO1xudmFyIG9wdGlvbnNfMSA9IHJlcXVpcmUoXCIuL29wdGlvbnNcIik7XG52YXIgSGludFNlcnZpY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSGludFNlcnZpY2UoKSB7XG4gICAgICAgIHRoaXMuYW5jaG9ycyA9IHt9O1xuICAgICAgICB0aGlzLm92ZXJsYXkkID0gbmV3IFN1YmplY3RfMS5TdWJqZWN0KCk7XG4gICAgICAgIHRoaXMucmVnaXN0cmF0aW9uJCA9IG5ldyBTdWJqZWN0XzEuU3ViamVjdCgpO1xuICAgICAgICB0aGlzLmZpbmlzaCQgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICAgICAgdGhpcy5zaG93aW5nU3RlcCQgPSBuZXcgU3ViamVjdF8xLlN1YmplY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBoaW50IHNlcnZpY2VcbiAgICAgKiBAbWV0aG9kIGluaXRpYWxpemVcbiAgICAgKiBAcGFyYW0gIHtIaW50T3B0aW9uc30gb3B0aW9ucyBpbml0IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IHN0YXJ0T3JkZXIgc3RhcnQgb3JkZXJcbiAgICAgKiBAcmV0dXJuIHZvaWRcbiAgICAgKi9cbiAgICBIaW50U2VydmljZS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChvcHRpb25zLCBzdGFydE9yZGVyKSB7XG4gICAgICAgIHRoaXMuaGludE9wdGlvbnMgPSBPYmplY3QuYXNzaWduKG5ldyBvcHRpb25zXzEuSGludE9wdGlvbnMoKSwgb3B0aW9ucyB8fCBuZXcgb3B0aW9uc18xLkhpbnRPcHRpb25zKCkpO1xuICAgICAgICB2YXIgbm9kZXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0aGlzLmhpbnRPcHRpb25zLnN0ZXBUYWcpO1xuICAgICAgICB0aGlzLnN0ZXBzID0gdGhpcy5pbml0U3RlcHMobm9kZXMpO1xuICAgICAgICB2YXIgc3RhcnRTdGVwSW5kZXg7XG4gICAgICAgIC8vIEZpbmQgc2FtZSBvcmRlciBvbiBzdGFydE9yZGVyIGFuZCBTdGVwc1xuICAgICAgICB0aGlzLnN0ZXBzLnNvbWUoZnVuY3Rpb24gKHN0ZXAsIGluZGV4KSB7XG4gICAgICAgICAgICBpZiAoc3RlcC5vcmRlciA9PT0gc3RhcnRPcmRlcikge1xuICAgICAgICAgICAgICAgIHN0YXJ0U3RlcEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoc3RhcnRTdGVwSW5kZXggPT0gbnVsbCkge1xuICAgICAgICAgICAgc3RhcnRTdGVwSW5kZXggPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhcnRBdChzdGFydFN0ZXBJbmRleCk7XG4gICAgICAgIHRoaXMub3ZlcmxheSQubmV4dCh0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNob3cgc3RlcFxuICAgICAqIEBtZXRob2Qgc2hvd1xuICAgICAqIEBwYXJhbSAge1N0ZXB9IHN0ZXAgW2Rlc2NyaXB0aW9uXVxuICAgICAqL1xuICAgIEhpbnRTZXJ2aWNlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKHN0ZXApIHtcbiAgICAgICAgdmFyIGFuY2hvciA9IHRoaXMuYW5jaG9yc1tzdGVwLnNlbGVjdG9yXTtcbiAgICAgICAgaWYgKCFhbmNob3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmNob3Iuc2hvd1N0ZXAoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNob3cgc3RlcCBuZXh0IHRvIHtTdGVwfSB0aGlzLmN1cnJlbnRTdGVwXG4gICAgICogQG1ldGhvZCBzaG93TmV4dFxuICAgICAqL1xuICAgIEhpbnRTZXJ2aWNlLnByb3RvdHlwZS5zaG93TmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RlcCA9IHRoaXMuc3RlcHNbdGhpcy5zdGVwcy5pbmRleE9mKHRoaXMuY3VycmVudFN0ZXApICsgMV07XG4gICAgICAgIHZhciBhbmNob3IgPSB0aGlzLmFuY2hvcnNbdGhpcy5jdXJyZW50U3RlcC5zZWxlY3Rvcl07XG4gICAgICAgIGlmICghYW5jaG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYW5jaG9yLnNob3dTdGVwKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBPbiBvdmVybGF5IGNsaWNrIGJlaGF2aW91clxuICAgICAqIEBtZXRob2Qgb3ZlcmxheU5leHRcbiAgICAgKi9cbiAgICBIaW50U2VydmljZS5wcm90b3R5cGUub3ZlcmxheU5leHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmhhc05leHQoKSkge1xuICAgICAgICAgICAgdGhpcy5hbmNob3JzW3RoaXMuY3VycmVudFN0ZXAuc2VsZWN0b3JdLmhpZGVTdGVwKCk7XG4gICAgICAgICAgICB0aGlzLnNob3dOZXh0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmVuZCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTaG93IHN0ZXAgcHJldmlvdXMgdG8ge1N0ZXB9IHRoaXMuY3VycmVudFN0ZXBcbiAgICAgKiBAbWV0aG9kIHNob3dQcmV2XG4gICAgICovXG4gICAgSGludFNlcnZpY2UucHJvdG90eXBlLnNob3dQcmV2ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmN1cnJlbnRTdGVwID0gdGhpcy5zdGVwc1t0aGlzLnN0ZXBzLmluZGV4T2YodGhpcy5jdXJyZW50U3RlcCkgLSAxXTtcbiAgICAgICAgdmFyIGFuY2hvciA9IHRoaXMuYW5jaG9yc1t0aGlzLmN1cnJlbnRTdGVwLnNlbGVjdG9yXTtcbiAgICAgICAgaWYgKCFhbmNob3IpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhbmNob3Iuc2hvd1N0ZXAoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIGhpbnQgY29tcG9uZW50XG4gICAgICogQG1ldGhvZCByZWdpc3RlclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICBzZWxlY3RvciAgYmluZGVkIHRvXG4gICAgICogQHBhcmFtICB7VG91ckNvbXBvbmVudH0gY29tcG9uZW50IGl0c2VsZlxuICAgICAqL1xuICAgIEhpbnRTZXJ2aWNlLnByb3RvdHlwZS5yZWdpc3RlciA9IGZ1bmN0aW9uIChzZWxlY3RvciwgY29tcG9uZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmFuY2hvcnNbc2VsZWN0b3JdKSB7XG4gICAgICAgICAgICB0aHJvdyAnc2VsZWN0b3IgJyArIHNlbGVjdG9yICsgJyBhbHJlYWR5IHJlZ2lzdGVyZWQhJztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFuY2hvcnNbc2VsZWN0b3JdID0gY29tcG9uZW50O1xuICAgICAgICB0aGlzLnJlZ2lzdHJhdGlvbiQubmV4dCh0cnVlKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIElzIHtTdGVwfSB0aGlzLmN1cnJlbnRTdGVwIGhhcyBuZXh0XG4gICAgICogQG1ldGhvZCBoYXNOZXh0XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBIaW50U2VydmljZS5wcm90b3R5cGUuaGFzTmV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHMuaW5kZXhPZih0aGlzLmN1cnJlbnRTdGVwKSA8IHRoaXMuc3RlcHMubGVuZ3RoIC0gMTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIElzIHtTdGVwfSB0aGlzLmN1cnJlbnRTdGVwIGhhcyBwcmV2aW91c1xuICAgICAqIEBtZXRob2QgaGFzUHJldlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgSGludFNlcnZpY2UucHJvdG90eXBlLmhhc1ByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0ZXBzLmluZGV4T2YodGhpcy5jdXJyZW50U3RlcCkgPiAwO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRmluYWxpemUgb3VyIGhpbnQgdG91ci5cbiAgICAgKiBAbWV0aG9kIGVuZFxuICAgICAqL1xuICAgIEhpbnRTZXJ2aWNlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3ZlcmxheSQubmV4dChmYWxzZSk7XG4gICAgICAgIHZhciBhbmNob3IgPSB0aGlzLmFuY2hvcnNbdGhpcy5jdXJyZW50U3RlcC5zZWxlY3Rvcl07XG4gICAgICAgIGlmICghYW5jaG9yKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50U3RlcCA9IHVuZGVmaW5lZDtcbiAgICAgICAgYW5jaG9yLmhpZGVTdGVwKCk7XG4gICAgICAgIHRoaXMuZmluaXNoJC5uZXh0KHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3RhcnQgaGludCB0b3VyIGF0IHNvbWUgcG9zaXRpb25cbiAgICAgKiBAbWV0aG9kIHN0YXJ0QXRcbiAgICAgKiBAcGFyYW0gIHtudW1iZXJ9IHN0ZXBJZCBwb3NpdGlvbiBpbiB0aGlzLnN0ZXBzXG4gICAgICovXG4gICAgSGludFNlcnZpY2UucHJvdG90eXBlLnN0YXJ0QXQgPSBmdW5jdGlvbiAoc3RlcElkKSB7XG4gICAgICAgIHRoaXMuY3VycmVudFN0ZXAgPSB0aGlzLnN0ZXBzW3N0ZXBJZF07XG4gICAgICAgIHRoaXMuc2hvdyh0aGlzLmN1cnJlbnRTdGVwKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbnZlcnQgRWxlbWVudFtdIHRvIFN0ZXBbXVxuICAgICAqIEBtZXRob2QgaW5pdFN0ZXBzXG4gICAgICogQHBhcmFtICB7Tm9kZUxpc3RPZjxFbGVtZW50Pn0gbm9kZXNcbiAgICAgKiBAcmV0dXJuIHtTdGVwW119XG4gICAgICovXG4gICAgSGludFNlcnZpY2UucHJvdG90eXBlLmluaXRTdGVwcyA9IGZ1bmN0aW9uIChub2Rlcykge1xuICAgICAgICB2YXIgc3RlcHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgc3RlcHMucHVzaCh7XG4gICAgICAgICAgICAgICAgc2VsZWN0b3I6IG5vZGVzW2ldLmdldEF0dHJpYnV0ZSgnc2VsZWN0b3InKSxcbiAgICAgICAgICAgICAgICBvcmRlcjogK25vZGVzW2ldLmdldEF0dHJpYnV0ZSgnb3JkZXInKSB8fCB0aGlzLmhpbnRPcHRpb25zLmRlZmF1bHRPcmRlcixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGVwcyA9IHN0ZXBzLnNvcnQoZnVuY3Rpb24gKGVsMSwgZWwyKSB7XG4gICAgICAgICAgICByZXR1cm4gZWwxLm9yZGVyIC0gZWwyLm9yZGVyO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEhpbnRTZXJ2aWNlLnByb3RvdHlwZS5wdXRPdmVybGF5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYm9keScpO1xuICAgIH07XG4gICAgSGludFNlcnZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkluamVjdGFibGUoKVxuICAgIF0sIEhpbnRTZXJ2aWNlKTtcbiAgICByZXR1cm4gSGludFNlcnZpY2U7XG59KCkpO1xuZXhwb3J0cy5IaW50U2VydmljZSA9IEhpbnRTZXJ2aWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGludC5zZXJ2aWNlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2hpbnQuc2VydmljZS5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTp2YXJpYWJsZS1uYW1lXG5leHBvcnRzLkhpbnRDb25maWcgPSB7XG4gICAgSElOVF9UQUc6ICd0b3VyLXN0ZXAnLFxuICAgIERFRkFVTFRfUE9TSVRJT046ICdib3R0b20nLFxuICAgIFpfSU5ERVg6ICc5OTknLFxuICAgIERFRkFVTFRfT1JERVI6IDk5LFxuICAgIERFRkFVTFRfUFhfTEFZRVI6IDE1LFxuICAgIEFQUExZX1JFTEFUSVZFOiB0cnVlLFxuICAgIERJU01JU1NfT05fT1ZFUkxBWTogZmFsc2UsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFyaWFibGVzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3ZhcmlhYmxlcy5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciBoaW50X3NlcnZpY2VfMSA9IHJlcXVpcmUoXCIuL2hpbnQuc2VydmljZVwiKTtcbmV4cG9ydHMuSGludFNlcnZpY2UgPSBoaW50X3NlcnZpY2VfMS5IaW50U2VydmljZTtcbnZhciBjb21tb25fMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb21tb25cIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgaGludF9jb21wb25lbnRfMSA9IHJlcXVpcmUoXCIuL2hpbnQuY29tcG9uZW50XCIpO1xudmFyIHRvdXJfY29tcG9uZW50XzEgPSByZXF1aXJlKFwiLi9pbnRyby10b3VyL3RvdXIuY29tcG9uZW50XCIpO1xuZXhwb3J0cy5Ub3VyQ29tcG9uZW50ID0gdG91cl9jb21wb25lbnRfMS5Ub3VyQ29tcG9uZW50O1xudmFyIEhpbnRNb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSGludE1vZHVsZSgpIHtcbiAgICB9XG4gICAgSGludE1vZHVsZV8xID0gSGludE1vZHVsZTtcbiAgICBIaW50TW9kdWxlLmZvclJvb3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuZ01vZHVsZTogSGludE1vZHVsZV8xLFxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICAgICAgaGludF9zZXJ2aWNlXzEuSGludFNlcnZpY2UsXG4gICAgICAgICAgICBdLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgSGludE1vZHVsZSA9IEhpbnRNb2R1bGVfMSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuTmdNb2R1bGUoe1xuICAgICAgICAgICAgZGVjbGFyYXRpb25zOiBbaGludF9jb21wb25lbnRfMS5IaW50Q29tcG9uZW50LCB0b3VyX2NvbXBvbmVudF8xLlRvdXJDb21wb25lbnRdLFxuICAgICAgICAgICAgZXhwb3J0czogW2hpbnRfY29tcG9uZW50XzEuSGludENvbXBvbmVudCwgdG91cl9jb21wb25lbnRfMS5Ub3VyQ29tcG9uZW50XSxcbiAgICAgICAgICAgIGltcG9ydHM6IFtjb21tb25fMS5Db21tb25Nb2R1bGVdLFxuICAgICAgICB9KVxuICAgIF0sIEhpbnRNb2R1bGUpO1xuICAgIHJldHVybiBIaW50TW9kdWxlO1xuICAgIHZhciBIaW50TW9kdWxlXzE7XG59KCkpO1xuZXhwb3J0cy5IaW50TW9kdWxlID0gSGludE1vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2luZGV4LmpzXG4vLyBtb2R1bGUgaWQgPSAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsImV4cG9ydCAqIGZyb20gJy4vc3JjJztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vaW5kZXgudHMiLCJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBfX21ldGFkYXRhID0gKHRoaXMgJiYgdGhpcy5fX21ldGFkYXRhKSB8fCBmdW5jdGlvbiAoaywgdikge1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShrLCB2KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgaGludF9zZXJ2aWNlXzEgPSByZXF1aXJlKFwiLi9oaW50LnNlcnZpY2VcIik7XG52YXIgY29yZV8xID0gcmVxdWlyZShcIkBhbmd1bGFyL2NvcmVcIik7XG52YXIgSGludENvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBIaW50Q29tcG9uZW50KGhpbnRTZXJ2aWNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuaGludFNlcnZpY2UgPSBoaW50U2VydmljZTtcbiAgICAgICAgdGhpcy5oaW50U2VydmljZS5vdmVybGF5JC5zdWJzY3JpYmUoZnVuY3Rpb24gKGRhdGEpIHsgcmV0dXJuIF90aGlzLnNob3cgPSBkYXRhOyB9KTtcbiAgICB9XG4gICAgSGludENvbXBvbmVudC5wcm90b3R5cGUuZGlzbWlzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaGludFNlcnZpY2UuaGludE9wdGlvbnMuZGlzbWlzc09uT3ZlcmxheSlcbiAgICAgICAgICAgIHRoaXMuaGludFNlcnZpY2Uub3ZlcmxheU5leHQoKTtcbiAgICB9O1xuICAgIEhpbnRDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkNvbXBvbmVudCh7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICAgIHNlbGVjdG9yOiAndG91ci1vdmVybGF5JyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcImhpbnQtb3ZlcmxheVxcXCIgKm5nSWY9XFxcInNob3dcXFwiIChjbGljayk9XFxcImRpc21pc3MoKVxcXCI+PC9kaXY+XCIsXG4gICAgICAgIH0pLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnBhcmFtdHlwZXNcIiwgW2hpbnRfc2VydmljZV8xLkhpbnRTZXJ2aWNlXSlcbiAgICBdLCBIaW50Q29tcG9uZW50KTtcbiAgICByZXR1cm4gSGludENvbXBvbmVudDtcbn0oKSk7XG5leHBvcnRzLkhpbnRDb21wb25lbnQgPSBIaW50Q29tcG9uZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGludC5jb21wb25lbnQuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvaGludC5jb21wb25lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgX19tZXRhZGF0YSA9ICh0aGlzICYmIHRoaXMuX19tZXRhZGF0YSkgfHwgZnVuY3Rpb24gKGssIHYpIHtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEoaywgdik7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIGNvcmVfMSA9IHJlcXVpcmUoXCJAYW5ndWxhci9jb3JlXCIpO1xudmFyIGhpbnRfc2VydmljZV8xID0gcmVxdWlyZShcIi4uL2hpbnQuc2VydmljZVwiKTtcbnZhciB2YXJpYWJsZXNfMSA9IHJlcXVpcmUoXCIuLi92YXJpYWJsZXNcIik7XG52YXIgVG91ckNvbXBvbmVudCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUb3VyQ29tcG9uZW50KGhpbnRTZXJ2aWNlKSB7XG4gICAgICAgIHRoaXMuaGludFNlcnZpY2UgPSBoaW50U2VydmljZTtcbiAgICAgICAgdGhpcy5uZXh0RXZlbnRFbWl0dGVyID0gbmV3IGNvcmVfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5wcmV2RXZlbnRFbWl0dGVyID0gbmV3IGNvcmVfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgdGhpcy5leGl0RXZlbnRFbWl0dGVyID0gbmV3IGNvcmVfMS5FdmVudEVtaXR0ZXIoKTtcbiAgICB9XG4gICAgVG91ckNvbXBvbmVudC5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaGludFNlcnZpY2UucmVnaXN0ZXIodGhpcy5zZWxlY3RvciwgdGhpcyk7XG4gICAgfTtcbiAgICBUb3VyQ29tcG9uZW50LnByb3RvdHlwZS5zaG93U3RlcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oaW50U2VydmljZS5zaG93aW5nU3RlcCQubmV4dCh0aGlzKTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24gfHwgdGhpcy5oaW50U2VydmljZS5oaW50T3B0aW9ucy5kZWZhdWx0UG9zaXRpb247XG4gICAgICAgIHRoaXMub3JkZXIgPSArdGhpcy5vcmRlciB8fCB0aGlzLmhpbnRTZXJ2aWNlLmhpbnRPcHRpb25zLmRlZmF1bHRPcmRlcjtcbiAgICAgICAgdmFyIGhpZ2hsaWdodGVkRWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuc2VsZWN0b3IpO1xuICAgICAgICBpZiAoaGlnaGxpZ2h0ZWRFbGVtZW50KSB7XG4gICAgICAgICAgICBoaWdobGlnaHRlZEVsZW1lbnQuc3R5bGUuekluZGV4ID0gdmFyaWFibGVzXzEuSGludENvbmZpZy5aX0lOREVYO1xuICAgICAgICAgICAgaWYgKHRoaXMuaGludFNlcnZpY2UuaGludE9wdGlvbnMuZWxlbWVudHNEaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZUNsaWNrKGhpZ2hsaWdodGVkRWxlbWVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5oaW50U2VydmljZS5oaW50T3B0aW9ucy5hcHBseVJlbGF0aXZlKSB7XG4gICAgICAgICAgICAgICAgaGlnaGxpZ2h0ZWRFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ2hpbnQtcmVsYXRpdmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5wb3NpdGlvbikge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RvcCc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtQ2xhc3MgPSAndHJhbnNmb3JtWF81MCB0cmFuc2Zvcm1ZXzEwMCc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9wUG9zID0gaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldFRvcCAtIHRoaXMuaGludFNlcnZpY2UuaGludE9wdGlvbnMuZGVmYXVsdExheWVyO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnRQb3MgPSBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0TGVmdCArIGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRXaWR0aCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2JvdHRvbSc6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtQ2xhc3MgPSAndHJhbnNmb3JtWF81MCc7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9wUG9zID0gaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldFRvcCArIGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRIZWlnaHQgKyB0aGlzLmhpbnRTZXJ2aWNlLmhpbnRPcHRpb25zLmRlZmF1bHRMYXllcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWZ0UG9zID0gaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldExlZnQgKyBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0V2lkdGggLyAyO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3BQb3MgPSBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0VG9wICsgaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldEhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdFBvcyA9IGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRMZWZ0IC0gdGhpcy5oaW50U2VydmljZS5oaW50T3B0aW9ucy5kZWZhdWx0TGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtQ2xhc3MgPSAndHJhbnNmb3JtWV81MCB0cmFuc2Zvcm1YXzEwMCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b3BQb3MgPSBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0VG9wICsgaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldEhlaWdodCAvIDI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGVmdFBvcyA9IGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRMZWZ0ICsgaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldFdpZHRoICsgdGhpcy5oaW50U2VydmljZS5oaW50T3B0aW9ucy5kZWZhdWx0TGF5ZXI7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtQ2xhc3MgPSAndHJhbnNmb3JtWV81MCc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ25ldXRyYWwnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvcFBvcyA9IGhpZ2hsaWdodGVkRWxlbWVudC5vZmZzZXRUb3AgKyBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0SGVpZ2h0IC8gMjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWZ0UG9zID0gaGlnaGxpZ2h0ZWRFbGVtZW50Lm9mZnNldExlZnQgKyBoaWdobGlnaHRlZEVsZW1lbnQub2Zmc2V0V2lkdGggKyB0aGlzLmhpbnRTZXJ2aWNlLmhpbnRPcHRpb25zLmRlZmF1bHRMYXllcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1DbGFzcyA9IHRoaXMuY3VzdG9tQ3NzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnSW52YWxpZCBoaW50IHBvc2l0aW9uIC0+JyArIHRoaXMucG9zaXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRvcFBvcyA9IDA7XG4gICAgICAgICAgICB0aGlzLmxlZnRQb3MgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2hvd21lID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5oYXNOZXh0ID0gdGhpcy5oaW50U2VydmljZS5oYXNOZXh0KCk7XG4gICAgICAgIHRoaXMuaGFzUHJldiA9IHRoaXMuaGludFNlcnZpY2UuaGFzUHJldigpO1xuICAgIH07XG4gICAgVG91ckNvbXBvbmVudC5wcm90b3R5cGUuaGlkZVN0ZXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBoaWdobGlnaHRlZEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLnNlbGVjdG9yKTtcbiAgICAgICAgaWYgKGhpZ2hsaWdodGVkRWxlbWVudCkge1xuICAgICAgICAgICAgaGlnaGxpZ2h0ZWRFbGVtZW50LnN0eWxlLnpJbmRleCA9ICcwJztcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlQ2xpY2soaGlnaGxpZ2h0ZWRFbGVtZW50KTtcbiAgICAgICAgICAgIGhpZ2hsaWdodGVkRWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKCdoaW50LXJlbGF0aXZlJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zaG93bWUgPSBmYWxzZTtcbiAgICB9O1xuICAgIFRvdXJDb21wb25lbnQucHJvdG90eXBlLmV4aXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZXhpdEV2ZW50RW1pdHRlci5lbWl0KCk7XG4gICAgICAgIHRoaXMuaGludFNlcnZpY2UuZW5kKCk7XG4gICAgfTtcbiAgICBUb3VyQ29tcG9uZW50LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm5leHRFdmVudEVtaXR0ZXIuZW1pdCgpO1xuICAgICAgICB0aGlzLmhpZGVTdGVwKCk7XG4gICAgICAgIHRoaXMuaGludFNlcnZpY2Uuc2hvd05leHQoKTtcbiAgICB9O1xuICAgIFRvdXJDb21wb25lbnQucHJvdG90eXBlLnByZXYgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucHJldkV2ZW50RW1pdHRlci5lbWl0KCk7XG4gICAgICAgIHRoaXMuaGlkZVN0ZXAoKTtcbiAgICAgICAgdGhpcy5oaW50U2VydmljZS5zaG93UHJldigpO1xuICAgIH07XG4gICAgVG91ckNvbXBvbmVudC5wcm90b3R5cGUuZGlzYWJsZUNsaWNrID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKCdoaW50LWRpc2FibGVkJyk7XG4gICAgfTtcbiAgICBUb3VyQ29tcG9uZW50LnByb3RvdHlwZS5lbmFibGVDbGljayA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnaGludC1kaXNhYmxlZCcpO1xuICAgIH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFRvdXJDb21wb25lbnQucHJvdG90eXBlLCBcInRpdGxlXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFRvdXJDb21wb25lbnQucHJvdG90eXBlLCBcInNlbGVjdG9yXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgTnVtYmVyKVxuICAgIF0sIFRvdXJDb21wb25lbnQucHJvdG90eXBlLCBcIm9yZGVyXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFRvdXJDb21wb25lbnQucHJvdG90eXBlLCBcInBvc2l0aW9uXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5JbnB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgU3RyaW5nKVxuICAgIF0sIFRvdXJDb21wb25lbnQucHJvdG90eXBlLCBcImN1c3RvbUNzc1wiLCB2b2lkIDApO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuT3V0cHV0KCksXG4gICAgICAgIF9fbWV0YWRhdGEoXCJkZXNpZ246dHlwZVwiLCBjb3JlXzEuRXZlbnRFbWl0dGVyKVxuICAgIF0sIFRvdXJDb21wb25lbnQucHJvdG90eXBlLCBcIm5leHRFdmVudEVtaXR0ZXJcIiwgdm9pZCAwKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLk91dHB1dCgpLFxuICAgICAgICBfX21ldGFkYXRhKFwiZGVzaWduOnR5cGVcIiwgY29yZV8xLkV2ZW50RW1pdHRlcilcbiAgICBdLCBUb3VyQ29tcG9uZW50LnByb3RvdHlwZSwgXCJwcmV2RXZlbnRFbWl0dGVyXCIsIHZvaWQgMCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIGNvcmVfMS5PdXRwdXQoKSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjp0eXBlXCIsIGNvcmVfMS5FdmVudEVtaXR0ZXIpXG4gICAgXSwgVG91ckNvbXBvbmVudC5wcm90b3R5cGUsIFwiZXhpdEV2ZW50RW1pdHRlclwiLCB2b2lkIDApO1xuICAgIFRvdXJDb21wb25lbnQgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgY29yZV8xLkNvbXBvbmVudCh7XG4gICAgICAgICAgICBzZWxlY3RvcjogdmFyaWFibGVzXzEuSGludENvbmZpZy5ISU5UX1RBRyxcbiAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9XFxcImludHJvLXRvdXItaGludC13cmFwcGVyIHt7dHJhbnNmb3JtQ2xhc3N9fSBzdGVwe3tvcmRlcn19IHt7cG9zaXRpb259fVxcXCJcXG4gICpuZ0lmPVxcXCJzaG93bWVcXFwiIFtuZ1N0eWxlXT1cXFwieyd0b3AnOiB0b3BQb3MrJ3B4JywgJ2xlZnQnOiBsZWZ0UG9zKydweCd9XFxcIiA+XFxuICAgIDxkaXYgY2xhc3M9XFxcImhlYWRlclxcXCIgKm5nSWY9XFxcInRpdGxlXFxcIj57e3RpdGxlfX08L2Rpdj5cXG4gICAgPGRpdiBjbGFzcz1cXFwiY29udGVudFxcXCI+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvZGl2PlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJmb290ZXJcXFwiPlxcbiAgICAgIDxhIGNsYXNzPVxcXCJuYXZpZ2F0ZS1idG4gcHJldlxcXCIgKm5nSWY9XFxcImhhc1ByZXZcXFwiIChjbGljayk9XFxcInByZXYoKVxcXCI+JiM4NTkyOzwvYT5cXG4gICAgICA8YSBjbGFzcz1cXFwibmF2aWdhdGUtYnRuIG5leHRcXFwiICpuZ0lmPVxcXCJoYXNOZXh0XFxcIiAoY2xpY2spPVxcXCJuZXh0KClcXFwiPiYjODU5NDs8L2E+XFxuICAgICAgPGEgY2xhc3M9XFxcIm5hdmlnYXRlLWJ0biBleGl0XFxcIiAoY2xpY2spPVxcXCJleGl0KClcXFwiPiYjMTAwMDY7PC9hPlxcbiAgICA8L2Rpdj5cXG4gIDwvZGl2PlwiLFxuICAgICAgICB9KSxcbiAgICAgICAgX19tZXRhZGF0YShcImRlc2lnbjpwYXJhbXR5cGVzXCIsIFtoaW50X3NlcnZpY2VfMS5IaW50U2VydmljZV0pXG4gICAgXSwgVG91ckNvbXBvbmVudCk7XG4gICAgcmV0dXJuIFRvdXJDb21wb25lbnQ7XG59KCkpO1xuZXhwb3J0cy5Ub3VyQ29tcG9uZW50ID0gVG91ckNvbXBvbmVudDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvdXIuY29tcG9uZW50LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL2ludHJvLXRvdXIvdG91ci5jb21wb25lbnQuanNcbi8vIG1vZHVsZSBpZCA9IDZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgdmFyaWFibGVzXzEgPSByZXF1aXJlKFwiLi92YXJpYWJsZXNcIik7XG52YXIgSGludE9wdGlvbnMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSGludE9wdGlvbnMoKSB7XG4gICAgICAgIHRoaXMuZWxlbWVudHNEaXNhYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVmYXVsdFBvc2l0aW9uID0gdmFyaWFibGVzXzEuSGludENvbmZpZy5ERUZBVUxUX1BPU0lUSU9OO1xuICAgICAgICB0aGlzLmRlZmF1bHRPcmRlciA9IHZhcmlhYmxlc18xLkhpbnRDb25maWcuREVGQVVMVF9PUkRFUjtcbiAgICAgICAgdGhpcy5kZWZhdWx0TGF5ZXIgPSB2YXJpYWJsZXNfMS5IaW50Q29uZmlnLkRFRkFVTFRfUFhfTEFZRVI7XG4gICAgICAgIHRoaXMuYXBwbHlSZWxhdGl2ZSA9IHZhcmlhYmxlc18xLkhpbnRDb25maWcuQVBQTFlfUkVMQVRJVkU7XG4gICAgICAgIHRoaXMuc3RlcFRhZyA9IHZhcmlhYmxlc18xLkhpbnRDb25maWcuSElOVF9UQUc7XG4gICAgICAgIHRoaXMuZGlzbWlzc09uT3ZlcmxheSA9IHZhcmlhYmxlc18xLkhpbnRDb25maWcuRElTTUlTU19PTl9PVkVSTEFZO1xuICAgIH1cbiAgICByZXR1cm4gSGludE9wdGlvbnM7XG59KCkpO1xuZXhwb3J0cy5IaW50T3B0aW9ucyA9IEhpbnRPcHRpb25zO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3B0aW9ucy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3NyYy9vcHRpb25zLmpzXG4vLyBtb2R1bGUgaWQgPSA3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV84X187XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gZXh0ZXJuYWwgXCJAYW5ndWxhci9jb21tb25cIlxuLy8gbW9kdWxlIGlkID0gOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfOV9fO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwicnhqcy9TdWJqZWN0XCJcbi8vIG1vZHVsZSBpZCA9IDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==